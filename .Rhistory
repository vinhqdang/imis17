}
}
t1 <- -p/2 * 1.837877066 # 1.837... = log(2 * 3.1415...)
t2 <- -log(detVx) / 2
xmu <- t(apply(x, 1, "-", centers))
# print(centers)	# for debug
# print(xmu)	# for debug
# s <- 0
# for (i in 1:n)
#	s <- s + t(xmu[i,]) %*% invVx %*% xmu[i,]
if (p == 1){
s <- sum(xmu^2 * invVx)
}else{
s <- sum(apply(xmu, 1, txInvVxX, invVx=invVx))
}
t3 <- -s / 2
ll <- (t1 + t2) * n + as.numeric(t3)	# log likelihood
list(lnL=ll, detVx=detVx)
}
# function for calculation of
# t(xmu[i,]) %*% invVx %*% xmu[i,]
txInvVxX <- function(x, invVx){
t(x) %*% invVx %*% x
}
xmeans(x = rnorm(50, sd=0.3), ik = 4)
matrix(rexp(200), 10)
size <- 20             #length of random number vectors
set.seed(1)
x <- runif(size)          # generate samples from uniform distribution (0.0, 1.0)
y <-runif(size)
df <-data.frame(x,y)
df
xmeans (df, ik=4)
plot (df)
size <- 200             #length of random number vectors
set.seed(1)
x <- runif(size)          # generate samples from uniform distribution (0.0, 1.0)
y <-runif(size)
df <-data.frame(x,y)
xmeans (df, ik=4)
plot (df)
y = xmeans (df, ik=4)
y$cluster
plot (df)
setwd("~/Desktop/API_VNM_DS2_en_csv_v2/")
data = read.csv("API_VNM_DS2_en_csv_v2.csv")
x = 1684
t = 1.05
x*t^10
x*t^50
x*t^100
x*t^50
x*t^60
x*t^70
x*t^65
x*t^65
setwd("~/workspace/imis17/")
df1 = read.csv("ismis17_trainingData/trainingData.csv")
df1 = read.table("ismis17_trainingData/trainingData.csv")
str(df1)
df1 = read.table("ismis17_trainingData/trainingData.csv", sep = ";")
str(df1)
df1 = read.csv("ismis17_trainingData/trainingData.csv", sep=";")
str(df1)
df1[2,]
df1[5,]
testdf = read.csv("testData.csv", sep =";")
str(testdf)
sample_df = read.csv ("exemplary_solution.csv")
str(sample_df)
df1[10,]
experts = read.csv("ismis17_trainingData/company_expert.csv", sep = ";")
str(experts)
length(union(df1$SymbolID))
df1$SymbolID
unique(df1$SymbolID)
str(unique(df1$SymbolID))
length(unique(df1$SymbolID))
str(df1)
str(testdf$SymbolID)
x = df1[5,]$Recommendations
x
x = as.character(x)
x
strsplit(x, "\\s+")
library(gsubfn)
strapplyc (x, "\\{.*?\\}")
x1 =strapplyc (x, "\\{.*?\\}")
x1[1]
x1[[1]]
x1[[[1]]
x1[[[1]]]
x1[[1]]
x1[[1]][1]
x1[[1]][2]
x1[[1]][12]
gsub(x1,"{")
?gsub
gsub("{","",x1)
gsub("\{","",x1)
gsub("\\{","",x1)
substring(x,1)
substring(x1,1)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
x1
substring(x1[[1]],1)
substring(x1[[1]],2)
substring(x1[[1]],1,1,)
substring(x1[[1]],1,1)
substring(x1[[1]],2)
x2 = substring(x1[[1]],2)
x2
x3 = substring(x2, 1, length(x2) - 1)
x4
x3
x3 = substr(x2, 1, length(x2) - 1)
x4
x3
x3 = substr(x2, 1, nchar(x2) - 1)
x3
x1
x2 = substring(x1[[1]],2)
x2
recommendation = strsplit(x3, split = ",")
recommendation
recommendation[[1]][2]
df = read.csv ("ismis17_trainingData/trainingData.csv", sep = ";")
predicts = c()
expert_ideas = c()
for (i in 1:nrow(df)) {
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
experd_idea = recommendation[[1]][2]
expert_ideas = c(experd_ideas, experd_idea)
}
}
predicts = c()
expert_ideas = c()
for (i in 1:nrow(df)) {
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
expert_ideas = c(expert_ideas, expert_idea)
}
}
predicts = c()
expert_ideas = c()
for (i in 1:nrow(df)) {
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
expert_ideas = c(expert_ideas, expert_idea)
}
}
}
expert_ideas
predicts = c()
expert_ideas = c()
for (i in 1:nrow(df)) {
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
expert_ideas = c(expert_ideas, expert_idea)
}
}
expert_ideas
str(expert_ideas)
sort(table(expert_ideas),decreasing=TRUE)[1:3]
sort(table(expert_ideas),decreasing=TRUE)[1]
x4 = sort(table(expert_ideas),decreasing=TRUE)[1:3]
x4
x4[[2]]
x4[1]
x4[1][1]
x4[1][[1]
x4[1][[1]]
x4[1][[1]]]
x4[[1]]
class(x4)
colnames (x34)
colnames (x4)
x4
x4[1]
as.str(x4[1])
as.character(x4[1])
as.character(x4[[1]][1])
as.character(x4[[1]])
as.name(x4)
as.name(x4[1])
find_major_vote <- function(InVec) {
names(which.max(table(InVec)))
}
find_major_vote(expert_ideas)
sample (1;2)
sample (1:2)
sample (1,2)
sample (2,1)
sample (2,1)
sample (2,1)
sample (2,1)
sample (2,1)
sample (2,1)
sample (2,1)
predicts = c()
for (i in 1:nrow(df)) {
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
expert_ideas = c()
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
expert_ideas = c(expert_ideas, expert_idea)
}
expert_ideas = as.factor(expert_ideas)
major_vote = sort(table(expert_ideas),decreasing=TRUE)[1:3]
pred = find_major_vote(major_vote)
predicts = c(predicts, pred)
if (major_vote[[1]] == major_vote[[2]]) {
print (major_vote)
waitKey()
}
}
waitKey <- function()
{
cat ("Press [enter] to continue")
line <- readline()
}
predicts = c()
for (i in 1:nrow(df)) {
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
expert_ideas = c()
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
expert_ideas = c(expert_ideas, expert_idea)
}
expert_ideas = as.factor(expert_ideas)
major_vote = sort(table(expert_ideas),decreasing=TRUE)[1:3]
pred = find_major_vote(major_vote)
predicts = c(predicts, pred)
if (major_vote[[1]] == major_vote[[2]]) {
print (major_vote)
waitKey()
}
}
predicts = c()
for (i in 1:nrow(df)) {
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
expert_ideas = c()
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
expert_ideas = c(expert_ideas, expert_idea)
}
expert_ideas = as.factor(expert_ideas)
major_vote = sort(table(expert_ideas),decreasing=TRUE)[1:3]
pred = find_major_vote(major_vote)
predicts = c(predicts, pred)
if (as.integer(major_vote[[1]]) == as.integer(major_vote[[2]])) {
print (major_vote)
waitKey()
}
}
x4
x4[[1]]
x4[[1]] == x4[[2]]
predicts = c()
for (i in 1:nrow(df)) {
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
expert_ideas = c()
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
expert_ideas = c(expert_ideas, expert_idea)
}
expert_ideas = as.factor(expert_ideas)
major_vote = sort(table(expert_ideas),decreasing=TRUE)[1:3]
pred = find_major_vote(major_vote)
predicts = c(predicts, pred)
print (major_vote)
if (as.integer(major_vote[[1]]) == as.integer(major_vote[[2]])) {
print (major_vote)
waitKey()
}
}
predicts = c()
for (i in 1:nrow(df)) {
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
expert_ideas = c()
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
expert_ideas = c(expert_ideas, expert_idea)
}
expert_ideas = as.factor(expert_ideas)
major_vote = sort(table(expert_ideas),decreasing=TRUE)[1:3]
pred = find_major_vote(major_vote)
predicts = c(predicts, pred)
}
str(predicts)
predicts = c()
for (i in 1:nrow(df)) {
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
expert_ideas = c()
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
expert_ideas = c(expert_ideas, expert_idea)
}
expert_ideas = as.factor(expert_ideas)
major_vote = sort(table(expert_ideas),decreasing=TRUE)[1:3]
pred = find_major_vote(major_vote)
print (pred)
predicts = c(predicts, pred)
}
i = 1
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
expert_ideas = c()
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
expert_ideas = c(expert_ideas, expert_idea)
}
expert_ideas = as.factor(expert_ideas)
major_vote = sort(table(expert_ideas),decreasing=TRUE)[1:3]
pred = find_major_vote(major_vote)
print (pred)
predicts = c(predicts, pred)
major_vote
find_major_vote(major_vote)
i = 2
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
expert_ideas = c()
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
expert_ideas = c(expert_ideas, expert_idea)
}
expert_ideas = as.factor(expert_ideas)
major_vote = sort(table(expert_ideas),decreasing=TRUE)[1:3]
pred = find_major_vote(major_vote)
print (pred)
predicts = c(predicts, pred)
major_vote
x
names(which.max(table(expert_ideas)))
predicts = c()
for (i in 1:nrow(df)) {
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
expert_ideas = c()
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
expert_ideas = c(expert_ideas, expert_idea)
}
expert_ideas = as.factor(expert_ideas)
major_vote = sort(table(expert_ideas),decreasing=TRUE)[1:3]
pred = find_major_vote(expert_ideas)
print (pred)
predicts = c(predicts, pred)
}
predicts
str(predicts)
preds = as.factor (predicts)
preds
t = table (as.factor(predicts), df$Decision)
t
calc_acc = function (a_table) {
sum(diag(a_table)) / sum(a_table)
}
calc_acc(t)
df
df[5,]$Recommendations
df[512,]$Recommendations
predicts = c()
Buys = c()
Holds = c()
Sells = c()
for (i in 1:nrow(df)) {
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
cur_buy = 0
cur_hold = 0
cur_sell = 0
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
if (expert_idea == "Hold") {
cur_hold = cur_hold + 1
}
else if (expert_idea == "Buy") {
cur_buy = cur_buy + 1
}
else if (expert_idea == "Sell") {
cur_sell = cur_sell + 1
}
}
Buys = c(Buys, cur_buy)
Sells = c(Sells, cur_sell)
Holds = c(Holds, cur_hold)
}
length(Buys)
length(Holds)
length(Sells)
summary (Buys)
summary (Sells)
summary (Holds)
Buys
Buys = c()
Holds = c()
Sells = c()
for (i in 1:nrow(df)) {
print (paste ("Processing line ", i))
x = df[i,]$Recommendation
x = as.character(x)
x1 = strapplyc (x, "\\{.*?\\}")[[1]]
cur_buy = 0
cur_hold = 0
cur_sell = 0
for (j in 1:length(x1)) {
x2 = substring(x1[[j]],2)
x3 = substr(x2, 1, nchar(x2) - 1)
recommendation = strsplit(x3, split = ",")
expert_idea = recommendation[[1]][2]
if (expert_idea == "Hold") {
cur_hold = cur_hold + 1
}
else if (expert_idea == "Buy") {
cur_buy = cur_buy + 1
}
else if (expert_idea == "Sell") {
cur_sell = cur_sell + 1
}
if (cur_sell + cur_buy + cur_hold != length(x1)) {
print ("Something wrong")
waitKey()
}
}
Buys = c(Buys, cur_buy)
Sells = c(Sells, cur_sell)
Holds = c(Holds, cur_hold)
}
